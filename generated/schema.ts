// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AvailableProperty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AvailableProperty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AvailableProperty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AvailableProperty", id.toString(), this);
    }
  }

  static load(id: string): AvailableProperty | null {
    return changetype<AvailableProperty | null>(
      store.get("AvailableProperty", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get marketValue(): BigInt | null {
    let value = this.get("marketValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marketValue(value: BigInt | null) {
    if (!value) {
      this.unset("marketValue");
    } else {
      this.set("marketValue", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PropertyListed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyListed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyListed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PropertyListed", id.toString(), this);
    }
  }

  static load(id: string): PropertyListed | null {
    return changetype<PropertyListed | null>(store.get("PropertyListed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get district(): string {
    let value = this.get("district");
    return value!.toString();
  }

  set district(value: string) {
    this.set("district", Value.fromString(value));
  }

  get neighborhood(): string {
    let value = this.get("neighborhood");
    return value!.toString();
  }

  set neighborhood(value: string) {
    this.set("neighborhood", Value.fromString(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get marketValue(): BigInt {
    let value = this.get("marketValue");
    return value!.toBigInt();
  }

  set marketValue(value: BigInt) {
    this.set("marketValue", Value.fromBigInt(value));
  }

  get isAvailable(): boolean {
    let value = this.get("isAvailable");
    return value!.toBoolean();
  }

  set isAvailable(value: boolean) {
    this.set("isAvailable", Value.fromBoolean(value));
  }

  get ReqStatus(): Array<string> {
    let value = this.get("ReqStatus");
    return value!.toStringArray();
  }

  set ReqStatus(value: Array<string>) {
    this.set("ReqStatus", Value.fromStringArray(value));
  }
}

export class PropertyBought extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyBought entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyBought must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PropertyBought", id.toString(), this);
    }
  }

  static load(id: string): PropertyBought | null {
    return changetype<PropertyBought | null>(store.get("PropertyBought", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }

  get marketValue(): BigInt {
    let value = this.get("marketValue");
    return value!.toBigInt();
  }

  set marketValue(value: BigInt) {
    this.set("marketValue", Value.fromBigInt(value));
  }
}

export class PropertyRequestStatusChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PropertyRequestStatusChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyRequestStatusChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PropertyRequestStatusChanged", id.toString(), this);
    }
  }

  static load(id: string): PropertyRequestStatusChanged | null {
    return changetype<PropertyRequestStatusChanged | null>(
      store.get("PropertyRequestStatusChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }

  get ReqStatus(): Array<string> {
    let value = this.get("ReqStatus");
    return value!.toStringArray();
  }

  set ReqStatus(value: Array<string>) {
    this.set("ReqStatus", Value.fromStringArray(value));
  }
}

export class PropertyChangedAvailability extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PropertyChangedAvailability entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyChangedAvailability must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PropertyChangedAvailability", id.toString(), this);
    }
  }

  static load(id: string): PropertyChangedAvailability | null {
    return changetype<PropertyChangedAvailability | null>(
      store.get("PropertyChangedAvailability", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }

  get isAvailable(): boolean {
    let value = this.get("isAvailable");
    return value!.toBoolean();
  }

  set isAvailable(value: boolean) {
    this.set("isAvailable", Value.fromBoolean(value));
  }
}

export class TransactionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionCanceled", id.toString(), this);
    }
  }

  static load(id: string): TransactionCanceled | null {
    return changetype<TransactionCanceled | null>(
      store.get("TransactionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get surveyNumber(): BigInt {
    let value = this.get("surveyNumber");
    return value!.toBigInt();
  }

  set surveyNumber(value: BigInt) {
    this.set("surveyNumber", Value.fromBigInt(value));
  }
}

export class RegionalAdminCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegionalAdminCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegionalAdminCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegionalAdminCreated", id.toString(), this);
    }
  }

  static load(id: string): RegionalAdminCreated | null {
    return changetype<RegionalAdminCreated | null>(
      store.get("RegionalAdminCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get regionalAdmin(): Bytes {
    let value = this.get("regionalAdmin");
    return value!.toBytes();
  }

  set regionalAdmin(value: Bytes) {
    this.set("regionalAdmin", Value.fromBytes(value));
  }

  get district(): string {
    let value = this.get("district");
    return value!.toString();
  }

  set district(value: string) {
    this.set("district", Value.fromString(value));
  }
}
